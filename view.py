# все этапы взаимодействия с пользователем, ввод,вывод, ошибки будут здесь же фиксироваться в логе
# сам алгоритм записи в файл с использованием даты/времени прописываем в модуле logger,
# а применяем/вызываем ф-цию здесь в нужный момент для фиксации данных в файле,

# запуск ф-ции вывода лога на экран при желании пользователя делаем в main,
# а саму логику вывода файла на экран нужно прописать здесь - ниже обозначила ф-цию
import logger as log

# функция выбора пункта меню - что хочет пользователь, внутри может использовать вспомогательные функции
# Варианты:
#  1 - воспользоваться калькулятором; 2 - посмотреть лог; 3 - выход
# return (выбранный пункт меню), в зависимости от него мы строим main и обратку пользователю
# если get_variant() = 1 и строка рац.-запускаем одну функцию,если комплекс.-др.;если 2 - возвращаем логгер, если 3 - break
# это название будет использовано в main


def get_variant():
    # выдать пользователю список вариантов меню и запросить выбор
    print('''
    Возможные пункты меню:
    1 - рассчитать выражение;
    2 - посмотреть лог файл
    3 - выйти из программы
    ''')
    check_input = False
    while not check_input:
        try:
            menu = int(input('Введите пункт меню из предложенных: '))
            log.menu_logger(menu)  # записали в лог
            check_input = True
            if menu > 3 or menu < 1:
                print('Выберите пункт меню от 1 до 3')
                log.error_logger(
                    'Некорректный ввод пункта меню, вне диапазона 1-3')
                check_input = False
        except:
            print('Некорректный ввод, введите число: 1, 2 или 3')
            log.error_logger('Некорректный ввод пункта меню')
    # ограничиваем ввод пунктами меню 1-2-3, если нет, возвращаем на ввод снова
    # по ходу проверки ввода, если что-то пошло не так, записываем ошибку через вызов ф-ции:
    # log.error_logger(передаем сюда ошибку)
    return menu

# функция запроса строки выражения, внутри может использовать вспомогательные функции исключения ошибок
# запускается, если в ф-ции ниже выбран пункт 1
# return кортеж (тип выражения:рац.или комплекс., строка данных),в зависимости от типа в main вызываются модули
# в строке допустима точка (.) - т.к. считаем рациональные числа
# это название будет использовано в main


def get_value():
    print('''
    Обратите внимание:
    1. В рациональных числах 
    - не допускаются "," (запятые) - отделяйте дробную часть "." (точкой),
    как например: 2.54-1.05*6.45 и т.п.

    2. Комплексные числа в выражении 
    - должны быть обрамлены скобками (): 
    как например, (2+4j)*(1-3j)-(1+8j) и т.п.''')

    # можно доработать проверкой соответствия строки шаблону регулярного выражения, пока так
    # допустимые символы в выражении в списке + сами цифры
    li_char = ['(', ')', '+', '*', '/', '-','.','i','j']
    check_input = False
    while not check_input:
        data = input('\nВведите выражение = ')
        log.input_logger(data)
        check_input = True

        for el in data:
            if not el.isdigit():
                if not el in li_char:
                    print('В выражении недопустимые символы')
                    log.error_logger('В выражении недопустимые символы')
                    check_input = False
                    break

    if "j" in data or "i" in data:  
        type_str = 'c'
    else:
        type_str = 'r'  
    data_input = (type_str, data)

    # по ходу проверки ввода, если что-то пошло не так, записываем ошибку через ф-цию
    # log.error_logger(передаем сюда ошибку)
    return data_input  # вернули кортеж

# функция вывода данных, внутри может использовать вспомогательные функции
# в качестве данных будет либо результат вычислений, либо лог, в зависимости от выбранного пункта меню
# что вычисляем и что показываем - будет пропсиано в controller или в main, здесь просто прописать логику вывода.
# это название будет использовано в main


def view_data(data, title):
    print('\nПолучен результат:')
    print(f'{title} = {data}')
    log.res_logger(data)  # показали рез-т и записали в лог

# эту ф-цию запускаем в main или ниже (и передаем туда файл) при выборе пункта 2.
# саму логику вывода прописать здесь - построчно считывать из файла
# подумать, можно ли организовать вывод в промежутке даты/времени
# может лучше использовать для этого json и какую-то структуру данных
# но для начала простой вывод построчно текстового файла


def view_logger(fl):
    log.view_log_logger(fl)  # записали это в лог,что выдали файл к просмотру
    # описать вывод строк из файла и
    with open(fl, 'r', encoding="utf8") as file:
        log_txt = file.read()
    print(log_txt)


# в процессе решить, возможно, нужно будет что-то объединить и пр.
# смысл в том, что мне в main нужно понимать выбор пользователя, саму строку и тип выражения:рац.или комплекс.
